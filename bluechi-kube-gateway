#!/usr/bin/env python3
import os
import json
import subprocess
from datetime import datetime

from flask import Flask, jsonify, request

BKG_PODMAN = os.environ.get('BKG_PODMAN', '/usr/bin/podman')
BKG_PORT = int(os.environ.get('BKG_PORT', 8000))
BKG_QUADLET_DIR = os.environ.get('BKG_QUADLET_DIR', '/etc/containers/systemd')

app = Flask(__name__)


def _kube_state(podman_data):
    state = podman_data.get("State")

    # Initialize states
    running_state = None
    terminated_state = None
    waiting_state = None

    # Determine the state based on Podman output
    if isinstance(state, str):
        if state == "running":
            running_state = {"startedAt": podman_data.get("Created")}
        elif state == "exited":
            terminated_state = {
                "exitCode": 0,  # You may want to adjust this based on actual exit code
                "finishedAt": podman_data.get("Created"),  # Set this to the actual finished time if available
                "startedAt": podman_data.get("Created"),
            }
    else:
        # Handle unexpected cases, like if state is a different structure
        phase = "unknown"

    return {
        "running": running_state,
        "terminated": terminated_state,
        "waiting": waiting_state,
    }


def _podman_to_kube(namespace, uid, podman_data):
    return {
            "kind": "Pod",
            "apiVersion": "v1",
            "metadata": {
                "name": uid,
                "namespace": namespace,
                "uid": podman_data.get("Id"),
                "creationTimestamp": podman_data.get("Created"),
            },
            "status": {
                "phase": podman_data.get("State", {}).get("Status", "Unkonwn"),
                "containerStatuses": [
                    {
                        "name": uid,
                        "state": _kube_state(podman_data),
                        "ready": podman_data.get("State", {}).get("Running", False),
                        "restartCount": podman_data.get("RestartCount", 0),
                        "image": podman_data.get("Image"),
                        "imageID": podman_data.get("ImageID"),
                    }
                ]
            },
            'spec': {
                "containers": [
                    {
                        "name": uid,
                        "image": podman_data.get("Image"),
                        "ports": podman_data.get('Ports', [])
                    }
                ]
            }
        }


def _get_pod(namespace, uid):
    try:
        # Get the pod/container status using the Podman CLI
        result = subprocess.run(
            BKG_PODMAN.split(' ') + ["inspect", uid],
            capture_output=True,
            text=True,
            check=True
        )

        return _podman_to_kube(namespace, uid, json.loads(result.stdout)[0])

    except subprocess.CalledProcessError as e:
        print(f"Error retrieving status: {e.stderr}")
    except json.JSONDecodeError as e:
        print(f"Error parsing JSON: {e}")


def _get_pods(namespace):
    try:
        # Get the list of containers using the Podman CLI
        result = subprocess.run(
            BKG_PODMAN.split(' ') + ["ps", "--format", "json"],
            capture_output=True,
            text=True,
            check=True
        )

        # Parse the JSON output
        containers_data = json.loads(result.stdout)

        # Format the data to resemble a Kubernetes response
        kubernetes_response = {
            "kind": "PodList",
            "apiVersion": "v1",
            "metadata": {
                "resourceVersion": "0"
            },
            "items": []
        }

        for container in containers_data:
            kubernetes_response['items'].append(_get_pod(namespace, container['Names'][0].lstrip('/')))
            # kubernetes_response['items'].append(_podman_to_kube(namespace, container['Names'][0].lstrip('/'), container))
            
        return kubernetes_response

    except subprocess.CalledProcessError as e:
        print(f"Error retrieving containers: {e.stderr}")
    except json.JSONDecodeError as e:
        print(f"Error parsing JSON: {e}")


@app.route('/apis', methods=['GET'])
def apis():
    return jsonify({
        'apiVersion': 'v1',
        'kind': 'APIGroupList',
        'groups': [
            {
                'name': '',
                'versions': [
                    {
                        'version': 'v1',
                        'groupVersion': 'v1'
                    }
                ],
                'preferredVersion': {
                    'version': 'v1',
                    'groupVersion': 'v1'
                }
            },
        ]
    })


@app.route('/api', methods=['GET'])
def api():
    return jsonify({
        'paths': {
            '/api/v1/pods': 'core/v1'
        }
    })


@app.route('/api/v1', methods=['GET'])
def api_corev1():
     return jsonify({
        'apiVersion': 'v1',
        'kind': 'APIResourceList',
        'resources': [
            {
                'name': 'pods',
                'kind': 'Pod',
                'singularName': 'pod',
                'namespaced': True,
                'shortNames': ['po'],
                'verbs': ['create', 'list', 'get', 'watch', 'update', 'patch', 'delete']
            }
        ]
    })


@app.route('/api/v1/namespaces/<namespace>/pods', methods=['GET'])
def api_corev1_pods(namespace):
    return jsonify(_get_pods(namespace))


@app.route('/api/v1/namespaces/<namespace>/pods/<name>', methods=['GET'])
def api_corev1_pod(namespace, name):
    return jsonify(_get_pod(namespace, name))


@app.route('/api/<api_version>/<path:path>', methods=['GET', 'POST', 'PUT', 'DELETE'])
def catch_all(api_version, path):
    return jsonify({
        'kind': 'Status',
        'apiVersion': api_version,
        'status': 'Failure',
        'message': 'Not Implemented',
        'code': 501
    }), 501


def run():
    app.run('0.0.0.0', port=BKG_PORT, debug=True)


if __name__ == '__main__':
    run()
